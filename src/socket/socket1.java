/*
 * Cliente de Comunicación por Sockets
 * 
 * Esta clase implementa el cliente de la aplicación de comunicación por sockets.
 * Proporciona una interfaz gráfica para enviar mensajes al servidor.
 * 
 * @author nestor
 * @version 1.0
 * @since 2024
 */
package socket;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Cliente de comunicación por sockets con interfaz gráfica Swing.
 * 
 * Esta clase extiende JFrame para proporcionar una interfaz gráfica que permite
 * al usuario enviar mensajes de texto al servidor a través de sockets TCP.
 * 
 * @author nestor
 * @version 1.0
 */
public class socket1 extends javax.swing.JFrame {

    // Constantes de configuración
    private static final String SERVER_HOST = "127.0.0.1";
    private static final int SERVER_PORT = 9999;
    private static final String WINDOW_TITLE = "Cliente de Sockets";
    
    // Logger para el manejo de errores
    private static final Logger LOGGER = Logger.getLogger(socket1.class.getName());

    /**
     * Constructor de la clase cliente.
     * 
     * Inicializa la interfaz gráfica y hace visible la ventana.
     */
    public socket1() {
        initComponents();
        this.setTitle(WINDOW_TITLE);
        this.setVisible(true);
        LOGGER.info("Cliente iniciado correctamente");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        texto = new javax.swing.JTextField();
        boton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        texto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoActionPerformed(evt);
            }
        });

        boton.setText("Enviar");
        boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(boton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(texto, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(169, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(texto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76)
                .addComponent(boton)
                .addContainerGap(99, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActionPerformed
        
        String mensaje = texto.getText().trim();
        
        // Validar que el mensaje no esté vacío
        if (mensaje.isEmpty()) {
            LOGGER.warning("Intento de enviar mensaje vacío");
            return;
        }
        
        System.out.println("Empezando transmisión del mensaje: " + mensaje);
         
        Socket conexion = null;
        DataOutputStream flujo = null;
        
        try {
            // Establecer conexión con el servidor
            LOGGER.info("Conectando al servidor " + SERVER_HOST + ":" + SERVER_PORT);
            conexion = new Socket(SERVER_HOST, SERVER_PORT);
            
            // Crear flujo de salida para enviar datos
            flujo = new DataOutputStream(conexion.getOutputStream());
            
            // Enviar el mensaje
            flujo.writeUTF(mensaje);
            LOGGER.info("Mensaje enviado exitosamente");
            
            // Limpiar el campo de texto después del envío
            texto.setText("");
            
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, "Error al enviar mensaje al servidor", ex);
            System.err.println("Error de conexión: " + ex.getMessage());
        } finally {
            // Cerrar recursos de manera segura
            try {
                if (flujo != null) {
                    flujo.close();
                }
                if (conexion != null) {
                    conexion.close();
                }
            } catch (IOException ex) {
                LOGGER.log(Level.WARNING, "Error al cerrar conexión", ex);
            }
        }
        
        System.out.println("Proceso de envío completado");
      
    }//GEN-LAST:event_botonActionPerformed

    private void textoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(socket1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(socket1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(socket1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(socket1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new socket1().setVisible(true);
                
                 
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton;
    private javax.swing.JTextField texto;
    // End of variables declaration//GEN-END:variables
}
//Mqtt, COap,
 //metodos para la transmision de multimedia
// sockets x1
//Sockets plus, transmision multimedia x2, firebase chat wan
