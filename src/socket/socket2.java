/*
 * Servidor de Comunicación por Sockets
 * 
 * Esta clase implementa el servidor de la aplicación de comunicación por sockets.
 * Proporciona una interfaz gráfica para recibir y mostrar mensajes del cliente.
 * 
 * @author nestor
 * @version 1.0
 * @since 2024
 */
package socket;

import java.io.DataInputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Servidor de comunicación por sockets con interfaz gráfica Swing.
 * 
 * Esta clase extiende JFrame para proporcionar una interfaz gráfica que permite
 * recibir y mostrar mensajes de texto de los clientes a través de sockets TCP.
 * 
 * @author nestor
 * @version 1.0
 */
public class socket2 extends javax.swing.JFrame {

    // Constantes de configuración
    private static final int SERVER_PORT = 9999;
    private static final String WINDOW_TITLE = "Servidor de Sockets";
    private static final String INITIAL_MESSAGE = "Servidor iniciado. Esperando conexiones en puerto " + SERVER_PORT + "...";
    
    // Variables de instancia
    public static ServerSocket server;
    private static final Logger LOGGER = Logger.getLogger(socket2.class.getName());
    
    /**
     * Constructor de la clase servidor.
     * 
     * Inicializa la interfaz gráfica, hace visible la ventana y
     * inicia el proceso de escucha de conexiones.
     */
    public socket2() {
        initComponents();
        this.setTitle(WINDOW_TITLE);
        this.setVisible(true);
        
        // Mostrar mensaje inicial
        jTextArea1.setText(INITIAL_MESSAGE);
        
        // Iniciar el proceso de escucha en un hilo separado
        Thread serverThread = new Thread(this::conexion);
        serverThread.setDaemon(true);
        serverThread.start();
        
        LOGGER.info("Servidor iniciado correctamente en puerto " + SERVER_PORT);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(700, 300, 0, 0));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método principal para ejecutar el servidor de forma independiente.
     * 
     * @param args Argumentos de línea de comandos (no utilizados)
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new socket2().setVisible(true);
            }
        });
    }

    /**
     * Método que maneja la conexión y recepción de mensajes del cliente.
     * 
     * Este método se ejecuta en un bucle infinito, esperando conexiones
     * de clientes y procesando los mensajes recibidos.
     */
    public void conexion() {
        while (true) {
            Socket socket = null;
            DataInputStream flujo = null;
            
            try {
                LOGGER.info("Esperando conexión de cliente...");
                server = new ServerSocket(SERVER_PORT);
                
                // Aceptar conexión del cliente
                socket = server.accept();
                LOGGER.info("Cliente conectado desde: " + socket.getInetAddress().getHostAddress());
                
                // Crear flujo de entrada para recibir datos
                flujo = new DataInputStream(socket.getInputStream());
                
                // Leer el mensaje del cliente
                String texto = flujo.readUTF();
                LOGGER.info("Mensaje recibido: " + texto);
                
                // Mostrar el mensaje en la interfaz gráfica
                final String mensajeCompleto = "\n[" + java.time.LocalTime.now() + "] Cliente: " + texto;
                javax.swing.SwingUtilities.invokeLater(() -> {
                    jTextArea1.append(mensajeCompleto);
                    // Auto-scroll al final del texto
                    jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                });
                
            } catch (IOException ex) {
                LOGGER.log(Level.SEVERE, "Error en la conexión del servidor", ex);
                System.err.println("Error de servidor: " + ex.getMessage());
            } finally {
                // Cerrar recursos de manera segura
                try {
                    if (flujo != null) {
                        flujo.close();
                    }
                    if (socket != null) {
                        socket.close();
                    }
                    if (server != null) {
                        server.close();
                    }
                } catch (IOException ex) {
                    LOGGER.log(Level.WARNING, "Error al cerrar conexión del servidor", ex);
                }
            }
            
            // Pequeña pausa antes de la siguiente iteración
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                LOGGER.warning("Hilo del servidor interrumpido");
                break;
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
//